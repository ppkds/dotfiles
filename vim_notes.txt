
" == Special characters in vim

" == In vim special key/unicode characters are entered in ***insert mode*** by  + special key or using  + unocode HEX
" == Useful statusline glyphs; kept for reference
"   ¦   " Alternate pipe symbol ( u00A6)
"   ॐ   " Aum ( u0950)
"   ⎌   " 'Modified' flag symbol 1 ( u238c)
"   ∅   " ReadOnly flag symbol ( u2205)
"   ⌥   " Git branch character ( u2325)
"   ⎇   " Git branch character ( u2387)
"   Ψ   " Git branch character ( u03a8)
"   ψ   " Git branch character ( u03c8)
"   ⍦   " Git branch character ( u2366)
"   ⑂   " Git branch character ( u2442)
"      " Gitbranch symbol ( E0A0 in Nerdfont 5.2 and CaskaydiaCove NF)
"      " Gitbranch symbol ( F418 in Nerdfont 5.2 and CaskaydiaCove NF)
"   ☰   " Lines symbol ( u2630)
"      " Lines symbol ( uF4A6 in CaskaydiaCove NF)
"   ㏑  " Lines symbol ( u33D1)
"      " Lines symbol ( u00B1 in Nerdfont 5.2)
"      " Lines symbol ( uE0A1 in CaskaydiaCove NF)
"      " Column symbol (^V uE0A3 in CaskaydiaCove NF)
"      " Android (^V uE70E in CaskaydiaCove NF)
"      " DOS / Windows (^V uE70F in CaskaydiaCove NF)
"      " Mac (^V uE711 in CaskaydiaCove NF)
"      " Unix / Linux (^V E712 in CaskaydiaCove NF)

" == Other special key display
"   ^M = <CR>
"   ^[ = ESC
"   ^? = BACKSPACE
"   ^I = TAB
"   ^V = ^v

""""""Determine current filesize in vim for statusline (alternate)

set statusline+=%{FileSize(line2byte('$')+len(getline('$')))}

function! FileSize(bytes)
  let l:bytes = a:bytes | let l:sizes = ['B', 'KB', 'MB', 'GB'] | let l:i = 0
  while l:bytes >= 1024 | let l:bytes = l:bytes / 1024.0 | let l:i += 1 | endwhile
  return l:bytes > 0 ? printf(' %.1f%s ', l:bytes, l:sizes[l:i]) : ''
endfunction
